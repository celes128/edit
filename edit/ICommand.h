#pragma once

#include <vector>
#include <memory>

namespace edit {

	class IDocument {
	public:
		IDocument() = default;
		virtual ~IDocument() = default;
	};

	// Output generated by commands when they are executed or undone.
	// Client code can writes classes that inherits CommandMessage.
	//	Example
	//	struct MyCmdMsg : public CommandMessage {
	//		std::string		message;// a message that can be logged by the client code
	//	};
	class CommandMessage {};

	using CommandOuput = std::vector<std::shared_ptr<CommandMessage>>;

	class ICommand {
	public:
		friend class CommandHistory;

		ICommand() {}
		virtual ~ICommand() = default;

	private:
		virtual CommandOuput execute(IDocument *doc) = 0;
		virtual CommandOuput undo(IDocument *doc) = 0;
	};
}